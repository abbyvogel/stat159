}
computeTTest(bird, TRUE)
computeTTest(bird, bird$treatment=TRUE)
computeTTest(bird, bird$treatment==TRUE)
bird$treatment
bird$treatment==TRUE
bird[1:5]
bird[,1:5]
computeTTest(bird, T)
computeTTest(bird$calcium, bird$treatment)
t.test(calcium ~ treatment, data = bird)
computeTTest <- function(data, hasTrtment){
m <- sum(hasTrtment) # size of treatment group
n <- sum(!hasTrtment) # size of control group
# compute the t-statistic (assuming unequal variances):
# the numerator, Y_bar - X_bar:
mean_diff <- mean(data[hasTrtment]) - mean(data[!hasTrtment])
# the denominator:
trt_var <- var(data[hasTrtment])/m
ctrl_var <- var(data[!hasTrtment])/n
sd_diff <- (trt_var + ctrl_var)^(.5)
# putting it all together to get the t-statistic: numerator/denominator...
t_stat <- mean_diff/sd_diff
# compute the p-value:
df <-m+n-2
pval <- pt(1-t_stat, df = df)
# print pretty results:
cat("Your test statistic:\n")
cat(paste(t_stat, "\n"))
cat("p-value:\n")
cat(paste(pval, "\n"))
return(c(t_stat, pval))
}
computeTTest <- function(data, hasTrtment){
m <- sum(hasTrtment) # size of treatment group
n <- sum(!hasTrtment) # size of control group
# compute the t-statistic (assuming unequal variances):
# the numerator, Y_bar - X_bar:
mean_diff <- mean(data[hasTrtment]) - mean(data[!hasTrtment])
# the denominator:
trt_var <- var(data[hasTrtment])/m
ctrl_var <- var(data[!hasTrtment])/n
sd_diff <- (trt_var + ctrl_var)^(.5)
# putting it all together to get the t-statistic: numerator/denominator...
t_stat <- mean_diff/sd_diff
# compute the p-value:
df <-m+n-2
pval <- 1-pt(t_stat, df = df)
# print pretty results:
cat("Your test statistic:\n")
cat(paste(t_stat, "\n"))
cat("p-value:\n")
cat(paste(pval, "\n"))
return(c(t_stat, pval))
}
computeTTest(bird$calcium, bird$treatment)
?sample
?apply
simulatePermuteDist <- function(data, hasTrtment, k = 1000){
# this function computes the test statistic on one data set
# data = a vector of data values
# hasTrtment = a logical vector indicating whether the observation is
#              in the treatment group (TRUE if in treatment)
n <- length(data)
# permute the data k times:
sim_data <- replicate(k, sample(data, 5))
# compute the test statistic on each simulated data set
# use the difference of means as the test statistic in this case
test_stats <- apply(sim_data, 1,
function(x){ computeTestStat(x) })
return(test_stats)
}
computeTestStat <- function(data, hasTrtment){
# this function computes the test statistic on one data set
# data = a vector of data values
# hasTrtment = a logical vector indicating whether the observation is
#              in the treatment group (TRUE if in treatment)
# for example, if the test statistic = difference of means,
# we would write:
test_stat <- mean(data[hasTrtment]) - mean(data[!hasTrtment])
return(test_stat)
}
class(bird)
permuteTest <- function(data, hasTrtment, k = 1000){
# compute the test statistic of your data
current_stat <- computeTestStat(data, hasTrtment)
# simulate test statistics under the randomization hypothesis
simulated_stats <- simulatePermuteDist(data, hasTrtment, k)
# compute p-value based on the distribution of the statistics
# simulated on the previous line
pval <- length(which(simulated_stat >= current_stat))/10
# print pretty results:
cat("Your test statistic:\n")
cat(paste(current_stat, "\n"))
cat("p-value:\n")
cat(paste(pval, "\n"))
return(c(current_stat, pval))
}
permuteTest(bird$calcium, bird$treatment)
simulatePermuteDist <- function(data, hasTrtment, k = 1000){
# this function computes the test statistic on one data set
# data = a vector of data values
# hasTrtment = a logical vector indicating whether the observation is
#              in the treatment group (TRUE if in treatment)
n <- length(data)
# permute the data k times:
sim_data <- replicate(k, sample(data, 5))
# compute the test statistic on each simulated data set
# use the difference of means as the test statistic in this case
test_stats <- apply(sim_data, 2,
function(x){ computeTestStat(x) })
return(test_stats)
}
permuteTest(bird$calcium, bird$treatment)
simulatePermuteDist <- function(data, hasTrtment, k = 1000){
# this function computes the test statistic on one data set
# data = a vector of data values
# hasTrtment = a logical vector indicating whether the observation is
#              in the treatment group (TRUE if in treatment)
n <- length(data)
# permute the data k times:
sim_data <- replicate(k, sample(data, 5))
# compute the test statistic on each simulated data set
# use the difference of means as the test statistic in this case
test_stats <- apply(sim_data, 2,
function(x){ computeTestStat(x) })
return(test_stats)
}
simulatePermuteDist(bird$calcium, bird$treatment, k=10)
computeTestStat <- function(data, hasTrtment){
# this function computes the test statistic on one data set
# data = a vector of data values
# hasTrtment = a logical vector indicating whether the observation is
#              in the treatment group (TRUE if in treatment)
# for example, if the test statistic = difference of means,
# we would write:
test_stat <- mean(data[hasTrtment]) - mean(data[!hasTrtment])
return(test_stat)
}
simulatePermuteDist(bird$calcium, bird$treatment, k=10)
simulatePermuteDist <- function(data, hasTrtment, k = 1000){
# this function computes the test statistic on one data set
# data = a vector of data values
# hasTrtment = a logical vector indicating whether the observation is
#              in the treatment group (TRUE if in treatment)
n <- length(data)
# permute the data k times:
sim_data <- replicate(k, sample(data, 5))
# compute the test statistic on each simulated data set
# use the difference of means as the test statistic in this case
test_stats <- apply(sim_data, 2,
function(x){ computeTestStat(x, hasTrtment) })
return(test_stats)
}
simulatePermuteDist(bird$calcium, bird$treatment, k=10)
simulatePermuteDist <- function(data, hasTrtment, k = 1000){
# this function computes the test statistic on one data set
# data = a vector of data values
# hasTrtment = a logical vector indicating whether the observation is
#              in the treatment group (TRUE if in treatment)
n <- length(data)
# permute the data k times:
sim_data <- replicate(k, sample(data, 10))
# compute the test statistic on each simulated data set
# use the difference of means as the test statistic in this case
test_stats <- apply(sim_data, 2,
function(x){ computeTestStat(x, hasTrtment) })
return(test_stats)
}
simulatePermuteDist(bird$calcium, bird$treatment, k=10)
permuteTest <- function(data, hasTrtment, k = 1000){
# compute the test statistic of your data
current_stat <- computeTestStat(data, hasTrtment)
# simulate test statistics under the randomization hypothesis
simulated_stats <- simulatePermuteDist(data, hasTrtment, k)
# compute p-value based on the distribution of the statistics
# simulated on the previous line
pval <- length(which(simulated_stat >= current_stat))/k
# print pretty results:
cat("Your test statistic:\n")
cat(paste(current_stat, "\n"))
cat("p-value:\n")
cat(paste(pval, "\n"))
return(c(current_stat, pval))
}
permuteTest(bird$calcium, bird$treatment)
permuteTest <- function(data, hasTrtment, k = 1000){
# compute the test statistic of your data
current_stat <- computeTestStat(data, hasTrtment)
# simulate test statistics under the randomization hypothesis
simulated_stats <- simulatePermuteDist(data, hasTrtment, k)
# compute p-value based on the distribution of the statistics
# simulated on the previous line
pval <- length(which(simulated_stats >= current_stat))/k
# print pretty results:
cat("Your test statistic:\n")
cat(paste(current_stat, "\n"))
cat("p-value:\n")
cat(paste(pval, "\n"))
return(c(current_stat, pval))
}
permuteTest(bird$calcium, bird$treatment)
?runif
runif(15, max=29)
sample(1:29, 15)
picable <- c(japan,
man,
woman,
usa,
cat,
heart,
alien,
skull,
lipstick,
shoes,
hat,
glasses,
tie,
briefcase,
bell,
tree,
phone,
book,
mailbox,
pin,
scissors,
piano,
target,
dice,
dog,
koala,
bottle,
fork,
knife,
spoon,
donut,
lollipop,
egg,
apple,
corn,
sun,
moon,
bridge,
hammer,
wrench,
bathtub,
anchor,
baseball,
football,
flag,
train,
diamond,
flame,
lock,
key)
picable <- c("japan",
"man",
"woman",
"usa",
"cat",
"heart",
"alien",
"skull",
"lipstick",
"shoes",
"hat",
"glasses",
"tie",
"briefcase",
"bell",
"tree",
"phone",
"book",
"mailbox",
"pin",
"scissors",
"piano",
"target",
"dice",
"dog",
"koala",
"bottle",
"fork",
"knife",
"spoon",
"donut",
"lollipop",
"egg",
"apple",
"corn",
"sun",
"moon",
"bridge",
"hammer",
"wrench",
"bathtub",
"anchor",
"baseball",
"football",
"flag",
"train",
"diamond",
"flame",
"lock",
"key")
sample(picable, 15)
?sample
trtb <- sample(picable, 15)
class(trtb)
trtb
picable - trtb
picable[picable != trtb]
picable[picable != "trtb"]
sample(picable[picable != "trtb"], 15)
length(picable)
trtb
picable <- c("japan",
"man",
"woman",
"usa",
"cat",
"heart",
"alien",
"skull",
"lipstick",
"hat",
"glasses",
"briefcase",
"bell",
"book",
"mailbox",
"pin",
"scissors",
"target",
"dice",
"bottle",
"knife",
"spoon",
"donut",
"lollipop",
"corn",
"sun",
"moon",
"bridge",
"hammer",
"wrench",
"baseball",
"diamond",
"flame",
"lock",
"key")
trtc <- sample(picable, 15)
trtc
picable <- c(
"man",
"usa",
"cat",
"heart",
"alien",
"lipstick",
"hat",
"bell",
"book",
"mailbox",
"pin",
"scissors",
"target",
"dice",
"donut",
"corn",
"moon",
"baseball",
"diamond",
"lock",
"key")
trtD <- sample(picable, 15)
trtd
trtD
trtc
sample(trtc, 7)
trtb
christine <- c(11, 12, 15, 14, 16)
var(christine)
?df
pf(.95, 3, 2)
pf(.95, 3, 2, lower.tail=FALSE)
pf(.05, 3, 2, lower.tail=FALSE)
?qf
qf(.05, 3, 2, lower.tail=FALSE)
df(19.16429, 3, 2, lower.tail=FALSE)
qf(19.16429, 3, 2, lower.tail=FALSE)
pf(19.16429, 3, 2, lower.tail=FALSE)
pf(19.16429, 3, 2, lower.tail=FALSE)
pf(19.16429, 3, 2, ncp=1, lower.tail=FALSE)
136^2 + 10^2 + 126^2
pf(19.16429, 3, 2, ncp=8.36, lower.tail=FALSE)
qf(.05, 3, 18, lower.tail=FALSE)
pf(3.159908, 3, 18, ncp=8.36*2, lower.tail=FALSE)
mean(c(5, 8, 8, 11))
3^2 + 3^2
18*4/3
pf(19.16429, 3, 2, ncp=24, lower.tail=FALSE)
pf(3.159908, 3, 18, ncp=24*2, lower.tail=FALSE)
8/4.3
qf(.05, 3, 2, lower.tail=FALSE)
pf(19.16429, 3, 2, ncp=1.86065, lower.tail=FALSE)
qf(.05, 3, 18, lower.tail=FALSE)
pf(3.159908, 3, 18, ncp=1.86065*2, lower.tail=FALSE)
qf(.05, 3, 30, lower.tail=FALSE)
pf(2.922277, 3, 30, ncp=1.86065*3, lower.tail=FALSE)
qf(.05, 3, 42, lower.tail=FALSE)
pf(2.827049, 3, 42, ncp=1.86065*4, lower.tail=FALSE)
32/4.3
pf(19.16429, 3, 2, ncp=7.44186, lower.tail=FALSE)
qf(.05, 3, 18, lower.tail=FALSE)
qf(.05, 3, 18, lower.tail=FALSE)
pf(3.159908, 3, 18, ncp=7.44186*2, lower.tail=FALSE)
pf(2.922277, 3, 30, ncp=0.8384207*3, lower.tail=FALSE)
pf(2.922277, 3, 30, ncp=7.44186*3, lower.tail=FALSE)
pf(19.16429, 3, 2, ncp=1.860465, lower.tail=FALSE)
pf(3.159908, 3, 18, ncp=0.07924875*2, lower.tail=FALSE)
pf(3.159908, 3, 18, ncp=0.07924875*2, lower.tail=FALSE)
qf(.05, 3, 18, lower.tail=FALSE)
pf(3.159908, 3, 18, ncp=1.860465*2, lower.tail=FALSE)
qf(.05, 3, 30, lower.tail=FALSE)
pf(2.922277, 3, 30, ncp=1.860465*3, lower.tail=FALSE)
qf(.05, 3, 42, lower.tail=FALSE)
pf(2.827049, 3, 42, ncp=1.86065*4, lower.tail=FALSE)
qf(.05, 3, 54, lower.tail=FALSE)
pf(2.775762, 3, 54, ncp=1.86065*5, lower.tail=FALSE)
qf(.05, 3, 66, lower.tail=FALSE)
pf(2.743711, 3, 66, ncp=1.86065*6, lower.tail=FALSE)
pf(2.743711, 3, 66, ncp=1.86065*6, lower.tail=FALSE)
poweroftau3 <- c(0.07924875, 0.2757441, 0.4330024, 0.5746942, 0.692315, 0.7842079)
plot(poweroftau3)
plot(poweroftau3, main= "Power by M for Ti= (-1 0 0 1)")
plot(poweroftau3, main= "Power by # of Square for Ti= (-1 0 0 1)")
plot(poweroftau3, main= "Power by # of Squares for Ti= (-1 0 0 1)", xlab="Number of Latin Squares",
ylab="Power", pch=19)
32/4.3
qf(.05, 3, 2, lower.tail=FALSE)
pf(19.16429, 3, 2, ncp=7.44186, lower.tail=FALSE)
qf(.05, 3, 18, lower.tail=FALSE)
pf(3.159908, 3, 18, ncp=7.44186*2, lower.tail=FALSE)
pf(2.922277, 3, 30, ncp=7.44186*3, lower.tail=FALSE)
pf(2.827049, 3, 42, ncp=7.44186*4, lower.tail=FALSE)
poweroftau2 <- c(0.1617019, 0.8384207, 0.9720373, 0.9961867)
plot(poweroftau3, main= "Power by # of Squares for Ti= (-2 0 0 2)", xlab="Number of Latin Squares",
ylab="Power", pch=19)
plot(poweroftau2, main= "Power by # of Squares for Ti= (-2 0 0 2)", xlab="Number of Latin Squares",
ylab="Power", pch=19)
x= (1,5)
x= c(1,5)
?sample
?append
x <- c(1:10)
y <- c(sample(c(1:50), 10))
plot(x, y)
plot(x, y, pch=19)
install.packages("spocc")
x= c(1,5)
x= c(1,5)
library("spocc", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
R.Version()
?R.Version
library("mapr")
out <- occ(query = c('Accipiter striatus', 'Falco peregrinus'), from = 'gbif', limit=10, has_coords = TRUE)
library('spocc')
out <- occ(query = c('Accipiter striatus', 'Falco peregrinus'), from = 'gbif', limit=10, has_coords = TRUE)
out <- occ(query = c('Pinus strobus', 'Ulmus americana'), from = 'gbif', limit=20, has_coords = TRUE)
df<-occ2df(out)
View(df)
map_leaflet(df)
max(c(1,2,3,4,NA))
output <- max(c(1,2,3,4,NA))
class(output)
c <- NA
class(c)
typeof(c)
typeof(output)
c
NA == NA_real_
c == NA_real_
typeof(NA)
max(letters[1:5])
e-a
'e'-'a'
typeof('e'-'a')
tryCatch('e'-'a')
typeof('NA_real_')
typeof(NA_real_)
is.na(c(1,2,3,4,NA))
sum(is.na(c(1,2,3,4,NA)))
typeof(sum(is.na(c(1,2,3,4,NA))))
range_value <- function(x) {
c <- na.rm(x)
max(c) - min(c)
}
range_value(c(1,2,3,4,NA))
na.rm
?max
source('../code/functions/regression-functions.R')
setwd("~/stat159/stat159-hw03/report")
source('../code/functions/regression-functions.R')
c(residual_sum_squares(sumreg), r_squared(sumreg), f_statistic(sumreg))
load('../data/regression.RData')
c(residual_sum_squares(sumreg), r_squared(sumreg), f_statistic(sumreg))
r_squared(sumreg)
c(residual_sum_squares(reg), r_squared(reg), f_statistic(reg))
r_squared(reg)
as.percent(r_squared(reg))
r_squared(reg)*100
